use parsing::ast::*;

#[pub]
Program -> Program
    = ses:SourceElement* {Program::Program(ses)}

#[pub]
SourceElement -> SourceElement
    = stmt:Statement {SourceElement::Statement(stmt)}
    / decl:FunctionDeclaration {SourceElement::FunctionDecl(decl)}

FunctionDeclaration -> FunctionDeclaration
    = Function id:Identifier OpenParen params:(Identifier ** Comma) OpenBrace body:SourceElement* CloseBrace {
        FunctionDeclaration::FunctionDeclaration(id, params, body)
    }

#[pub]
Statement -> Statement
    = Block
    // / VariableStatement
    / EmptyStatement
    / ExpressionStatement
    // / IfStatement
    // / IterationStatement
    // / ContinueStatement
    // / BreakStatement
    // / ReturnStatement
    // / WithStatement
    // / LabelledStatement
    // / SwitchStatement
    // / ThrowStatement
    // / TryStatement
    // / DebuggerStatement

StatementList = Statement+

Block -> Statement
    = OpenBrace stmts:Statement* CloseBrace {Statement::Block(stmts)}

VariableStatement -> Statement 
    = Var VariableDeclarationList {Statement::Stub}

VariableDeclarationList = VariableDeclaration (Comma VariableDeclaration)*

VariableDeclarationListNoIn = VariableDeclarationNoIn (Comma VariableDeclarationNoIn)*

VariableDeclaration -> () = Identifier Initializer? {()}

VariableDeclarationNoIn -> () = Identifier InitializerNoIn? {()}

Initializer = AssignmentExpression {()}

InitializerNoIn = AssignmentExpressionNoIn

EmptyStatement -> Statement 
    = Semicolon {Statement::Empty}

ExpressionStatement -> Statement 
    = !(OpenBrace / Function) expr:Expression Semicolon {Statement::Expression(expr)}

IfStatement -> Statement
    = If OpenParen Expression CloseParen Statement Else Statement {Statement::Stub}
    / If OpenParen Expression CloseParen Statement {Statement::Stub}

IterationStatement -> Statement
    = Do Statement While OpenParen Expression CloseParen Semicolon {Statement::Stub}
    / While OpenParen Expression CloseParen Statement {Statement::Stub}
    / For OpenParen ExpressionNoIn? Semicolon Expression? Semicolon Expression? CloseParen Statement {Statement::Stub}
    / For OpenParen Var VariableDeclarationListNoIn Semicolon Expression? Semicolon Expression? CloseParen Statement {Statement::Stub}
    / For OpenParen LeftHandSideExpression In Expression CloseParen Statement {Statement::Stub}
    / For OpenParen Var VariableDeclarationNoIn In Expression CloseParen Statement {Statement::Stub}

ContinueStatement
    = Continue Semicolon
    / Continue Identifier Semicolon {()} // fixme: no line terminator

BreakStatement
    = Break Semicolon
    / Break Identifier Semicolon {()} // fixme

ReturnStatement
    = Return Semicolon
    / Return Identifier Semicolon {()} // fixme

WithStatement
    = With OpenParen Expression CloseParen Statement {()}

SwitchStatement
    = Switch OpenParen Expression CloseParen CaseBlock

CaseBlock
    = OpenBrace CaseClause* CloseBrace
    / OpenBrace CaseClause* DefaultClause CaseClause* CloseBrace

CaseClause
    = Case Expression Colon StatementList? {()}

DefaultClause
    = Default Colon StatementList? {()}

#[pub]
PrimaryExpression -> SuperExpression
    = This {SuperExpression::This}
    / id:Identifier {SuperExpression::Identifier(id)}
    / lit:Literal {SuperExpression::Literal(lit)}
    / lit:ArrayLiteral {SuperExpression::ArrayLiteral(lit)}
    / lit:ObjectLiteral {SuperExpression::ObjectLiteral(lit)}
    / OpenParen expr:Expression CloseParen {SuperExpression::Expression(box expr)}

#[pub]
ArrayLiteral -> ArrayLiteral
    = OpenBracket CloseBracket {vec![]}
    / OpenBracket elements:ArrayElements CloseBracket {elements}

#[pub]
ArrayElements -> Vec<Option<()>>
    = ArrayElement ** Comma

ArrayElement -> Option<()>
    = (&Comma / &CloseBracket) {Option::None}
    / AssignmentExpression {Option::Some(())}

#[pub]
ElementList
    = Elision? AssignmentExpression {()}
    / ElementList Comma Elision? AssignmentExpression {()}

#[pub]
ObjectLiteral -> ObjectLiteral
    = OpenBrace CloseBrace {vec![]}
    / OpenBrace props:PropertyNameAndValueList Comma? CloseBrace {props}

#[pub]
PropertyNameAndValueList -> Vec<PropertyAssignment>
    = head:PropertyAssignment tail:(Comma ass:PropertyAssignment {ass})*
        {
            let mut v = vec![head];
            v.extend(tail.iter().cloned());
            v
        }

#[pub]
PropertyAssignment -> PropertyAssignment
    = PropertyName Colon AssignmentExpression 
        {PropertyAssignment::FieldValue}
    / Get PropertyName Parens OpenBrace FunctionBody CloseBrace 
        {PropertyAssignment::Getter}
    / Set PropertyName OpenParen PropertySetParameterList CloseParen OpenBrace FunctionBody CloseBrace
        {PropertyAssignment::Setter}

#[pub]
PropertyName
    = IdentifierName {()}
    / StringLiteral {()}
    / NumericLiteral {()}

#[pub]
PropertySetParameterList = Identifier {()}


Elision = Comma+

#[pub]
Literal -> Literal
    = NullLiteral
    / BooleanLiteral
    / NumericLiteral
    / StringLiteral

NullLiteral -> Literal = "null" _ { Literal::Null }

BooleanLiteral -> Literal = ("true" / "false") _ {
    match match_str {
        "true" => Literal::Bool(true),
        _ => Literal::Bool(false),
    }    
}

NumericLiteral -> Literal = Digit+ _ {
    let val = match_str.parse::<i32>().unwrap();
    Literal::Number(val)
} // fixme

StringLiteral -> Literal
    = "\"" DoubleStringCharacter* "\"" { Literal::String(String::from(match_str)) }
    / "'" SingleStringCharacter* "'" { Literal::String(String::from(match_str)) }

SingleStringCharacter = !"'" .

DoubleStringCharacter = !"\"" .

#[pub]
MemberExpression -> SuperExpression
    = expr:NoAccessMemberExpression actions:MemeberExpressionAccess* {
        actions.into_iter().fold(expr, |acc, action| match action {
            AccessAction::Dot => SuperExpression::DotAccess(box acc),
            AccessAction::Brackets => SuperExpression::BracketsAccess(box acc),
        })
    }

NoAccessMemberExpression -> SuperExpression
    = PrimaryExpression
    / FunctionExpression {SuperExpression::Stub}
    / New MemberExpression Arguments {SuperExpression::Stub}

MemeberExpressionAccess -> AccessAction
    = Dot IdentifierName {AccessAction::Dot}
    / OpenBracket Expression CloseBracket {AccessAction::Brackets}



NewExpression -> SuperExpression
    = New expr:NewExpression {SuperExpression::New(box expr)}
    / MemberExpression

#[pub]
CallExpression -> SuperExpression
    = expr:MemberExpression actions:CallAction* {
        actions.into_iter().fold(expr, |acc, action| match action {
            CallAction::Call => SuperExpression::Call(box acc),
            CallAction::BracketsAccess => SuperExpression::BracketsAccess(box acc),
            CallAction::DotAccess => SuperExpression::DotAccess(box acc),
        })
    }

CallAction -> CallAction
    = Arguments {CallAction::Call}
    / OpenBracket Expression CloseBracket {CallAction::BracketsAccess}
    / Dot IdentifierName {CallAction::DotAccess}

#[pub]
LeftHandSideExpression -> SuperExpression
    = CallExpression
    / NewExpression

#[pub]
PostfixExpression -> SuperExpression
    = lhs:LeftHandSideExpression PlusPlus {SuperExpression::PostfixIncrement(box lhs)}
    / lhs:LeftHandSideExpression MinusMinus {SuperExpression::PostfixDecrement(box lhs)}
    / LeftHandSideExpression

#[pub]
UnaryExpression -> SuperExpression
    = Delete UnaryExpression {SuperExpression::Delete}
    / Void UnaryExpression {SuperExpression::Void}
    / TypeOf UnaryExpression {SuperExpression::TypeOf}
    / PlusPlus UnaryExpression {SuperExpression::PrefixIncrement}
    / MinusMinus UnaryExpression {SuperExpression::PrefixDecrement}
    / Plus UnaryExpression {SuperExpression::UnaryPlus}
    / Minus UnaryExpression {SuperExpression::UnaryMinus}
    / Tilde UnaryExpression {SuperExpression::BitwiseNot}
    / Exclamation UnaryExpression {SuperExpression::LogicalNot}
    / PostfixExpression

#[pub]
MultiplicativeExpression -> SuperExpression
    = head:UnaryExpression rest:(op:MultiplicativeOperation expr:UnaryExpression {(op, expr)})* {
        rest.into_iter().fold(head, |acc, (op, expr)| match op {
            MathOp::Mult => SuperExpression::Mult(box acc, box expr),
            MathOp::Div => SuperExpression::Div(box acc, box expr),
            MathOp::Modulus => SuperExpression::Modulus(box acc, box expr),
            _ => panic!("unexpected multiplicative operation"),
        })
    }

MultiplicativeOperation -> MathOp
    = Mult {MathOp::Mult}
    / Div {MathOp::Div}
    / Modulus {MathOp::Modulus}

#[pub]
AdditiveExpression -> SuperExpression
    = head:MultiplicativeExpression rest:(op:AdditiveOperation expr:MultiplicativeExpression {(op, expr)})* {
        rest.into_iter().fold(head, |acc, (op, expr)| match op {
            MathOp::Plus => SuperExpression::Plus(box acc, box expr),
            MathOp::Minus => SuperExpression::Minus(box acc, box expr),
            _ => panic!("unexpected additive operation"),
        })
    }

AdditiveOperation -> MathOp 
    = Plus {MathOp::Plus}
    / Minus {MathOp::Minus}


ShiftExpression -> SuperExpression
    = head:AdditiveExpression rest:(op:ShiftOperation expr:AdditiveExpression {(op, expr)})* {
        rest.into_iter().fold(head, |acc, (op, expr)| match op {
                MathOp::LeftShift => SuperExpression::LeftShift(box acc, box expr),
                MathOp::SignedRightShift => SuperExpression::SignedRightShift(box acc, box expr),
                MathOp::UnsignedRightShift => SuperExpression::UnsignedRightShift(box acc, box expr),
                _ => panic!("unexpected shift operation")
            }
        )
    }

ShiftOperation -> MathOp 
    = LeftShift {MathOp::LeftShift}
    / SignedRightShift {MathOp::SignedRightShift}
    / UnsignedRightShift {MathOp::UnsignedRightShift}

#[pub]
RelationalExpression -> SuperExpression
    = head:ShiftExpression rest:(op:RelationalOperation expr:ShiftExpression {(op, expr)})* {
        rest.into_iter().fold(head, |acc, (op, expr)| match op {
                MathOp::Less => SuperExpression::Less(box acc, box expr),
                MathOp::LessEqual => SuperExpression::LessEqual(box acc, box expr),
                MathOp::Greater => SuperExpression::Greater(box acc, box expr),
                MathOp::GreaterEqual => SuperExpression::GreaterEqual(box acc, box expr),
                MathOp::InstanceOf => SuperExpression::InstanceOf(box acc, box expr),
                MathOp::In => SuperExpression::In(box acc, box expr),
                _ => panic!("unexpected relational operation")
            }
        )
    }

RelationalExpressionNoIn
    = ShiftExpression (RelationalOperationNoIn ShiftExpression)*

RelationalOperationNoIn -> MathOp
    = Less {MathOp::Less}
    / Greater {MathOp::Greater}
    / LessEqual {MathOp::LessEqual}
    / GreaterEqual {MathOp::GreaterEqual}
    / InstanceOf {MathOp::InstanceOf}

RelationalOperation -> MathOp
    = RelationalOperationNoIn 
    / In {MathOp::In}

#[pub]
EqualityExpression -> SuperExpression
    = head:RelationalExpression rest:(op:EqualityOperation expr:RelationalExpression {(op, expr)})* {
        rest.into_iter().fold(head, |acc, (op, expr)| match op {
                MathOp::Less => SuperExpression::Less(box acc, box expr),
                _ => panic!("unexpected equality operation")
            }
        )
    }

EqualityExpressionNoIn
    = RelationalExpressionNoIn (EqualityOperation RelationalExpressionNoIn)*


EqualityOperation -> MathOp 
    = Equal {MathOp::Equal}
    / NotEqual {MathOp::NotEqual}
    / StrictEqual {MathOp::StrictEqual}
    / StrictNotEqual {MathOp::StrictNotEqual}


BitwiseAndExpression -> SuperExpression
    = head:EqualityExpression rest:(BitwiseAnd expr:EqualityExpression {expr})* {
        rest.into_iter().fold(head, |acc, expr| 
            SuperExpression::BitwiseAnd(box acc, box expr)
        )
    }

BitwiseAndExpressionNoIn
    = EqualityExpressionNoIn (BitwiseAnd EqualityExpressionNoIn)*


BitwiseXorExpression -> SuperExpression
    = head:BitwiseAndExpression rest:(BitwiseXor expr:BitwiseAndExpression {expr})* {
        rest.into_iter().fold(head, |acc, expr| 
            SuperExpression::BitwiseXor(box acc, box expr)
        )
    }

BitwiseXorExpressionNoIn
    = BitwiseAndExpressionNoIn (BitwiseXor BitwiseAndExpressionNoIn)*


BitwiseOrExpression -> SuperExpression
    = head:BitwiseXorExpression rest:(BitwiseOr expr:BitwiseXorExpression {expr})* {
        rest.into_iter().fold(head, |acc, expr| 
            SuperExpression::BitwiseOr(box acc, box expr)
        )
    }

BitwiseOrExpressionNoIn
    = BitwiseXorExpressionNoIn (BitwiseOr BitwiseXorExpressionNoIn)*


LogicalAndExpression -> SuperExpression
    = head:BitwiseOrExpression rest:(LogicalAnd expr:BitwiseOrExpression {expr})* {
        rest.into_iter().fold(head, |acc, expr| 
            SuperExpression::LogicalAnd(box acc, box expr)
        )
    }

LogicalAndExpressionNoIn
    = BitwiseOrExpressionNoIn (LogicalAnd BitwiseOrExpressionNoIn)*


#[pub]
LogicalOrExpression -> SuperExpression
    = head:LogicalAndExpression rest:(LogicalOr expr:LogicalAndExpression {expr})* {
        rest.into_iter().fold(head, |acc, expr| 
            SuperExpression::LogicalOr(box acc, box expr)
        )
    }

LogicalOrExpressionNoIn
    = LogicalAndExpressionNoIn (LogicalOr LogicalAndExpressionNoIn)*


#[pub]
ConditionalExpression -> SuperExpression
    = cond:LogicalOrExpression rest:(QuestionMark thenBranch:AssignmentExpression Colon elseBranch:AssignmentExpression {(thenBranch, elseBranch)})* {
        rest.into_iter().rev().fold(cond, |acc, (thenBranch, elseBranch)| 
            SuperExpression::Ternary(box acc, box thenBranch, box elseBranch)
        )
    }

ConditionalExpressionNoIn
    = LogicalOrExpressionNoIn (QuestionMark AssignmentExpression Colon AssignmentExpressionNoIn)*


#[pub]
AssignmentExpression -> SuperExpression
    = head:ConditionalExpression rest:(op:AssignmentAction expr:AssignmentExpression {(op, expr)})* {
        rest.into_iter().fold(head, |acc, (op, expr)| match op {
                MathOp::Assign => SuperExpression::Assign,
                MathOp::MultAssign => SuperExpression::MultAssign,
                MathOp::DivAssign => SuperExpression::DivAssign,
                MathOp::ModulusAssign => SuperExpression::ModulusAssign,
                MathOp::PlusAssign => SuperExpression::PlusAssign,
                MathOp::MinusAssign => SuperExpression::MinusAssign,
                MathOp::LeftShiftAssign => SuperExpression::LeftShiftAssign,
                MathOp::SignedRightShiftAssign => SuperExpression::SignedRightShiftAssign,
                MathOp::UnsignedRightShiftAssign => SuperExpression::UnsignedRightShiftAssign,
                MathOp::BitwiseAndAssign => SuperExpression::BitwiseAndAssign,
                MathOp::BitwiseXorAssign => SuperExpression::BitwiseXorAssign,
                MathOp::BitwiseOrAssign => SuperExpression::BitwiseOrAssign,
                _ => panic!("unexpected assignment operation")
            }
        )
    }

AssignmentExpressionNoIn
    = ConditionalExpressionNoIn
    / LeftHandSideExpression Assign AssignmentExpressionNoIn
    / LeftHandSideExpression AssignmentOperator AssignmentExpressionNoIn

AssignmentAction -> MathOp
    = Assign {MathOp::Assign}
    / AssignmentOperator

AssignmentOperator -> MathOp
    = MultAssign {MathOp::MultAssign}
    / DivAssign {MathOp::DivAssign}
    / ModulusAssign {MathOp::ModulusAssign}
    / PlusAssign {MathOp::PlusAssign}
    / MinusAssign {MathOp::MinusAssign}
    / LeftShiftAssign {MathOp::LeftShiftAssign}
    / SignedRightShiftAssign {MathOp::SignedRightShiftAssign}
    / UnsignedRightShiftAssign {MathOp::UnsignedRightShiftAssign}
    / BitwiseAndAssign {MathOp::BitwiseAndAssign}
    / BitwiseXorAssign {MathOp::BitwiseXorAssign}
    / BitwiseOrAssign {MathOp::BitwiseOrAssign}

#[pub]
Expression -> SuperExpression
    = expr:AssignmentExpression (Comma AssignmentExpression)* {expr} // fixme

ExpressionNoIn
    = AssignmentExpressionNoIn (Comma AssignmentExpressionNoIn)*

Arguments 
    = OpenParen CloseParen
    / OpenParen ArgumentList CloseParen

ArgumentList = AssignmentExpression ++ Comma {()}

FunctionBody = "!" // fixme
FunctionExpression = "!" // fixme

This = "this" _
Get = "get" _
Set = "set" _
New = "new" _
Void = "void" _
Delete = "delete" _
TypeOf = "typeof" _
InstanceOf = "instanceof" _
In = "in" _
Var = "var" _
Function = "function" _
If = "if" _
Else = "else" _
For = "for" _
Do = "do" _
While = "while" _
Continue = "continue" _
Return = "return" _
With = "with" _
Break = "break" _
Switch = "switch" _
Case = "case" _
Try = "try" _
Default = "default" _

ReservedWord
    = "this"
    / "get"
    / "set"
    / "new"
    / "void"
    / "delete"
    / "typeof"
    / "instanceof"
    / "in"
    / "var"
    / "function"
    / "if"
    / "else"
    / "for"
    / "do"
    / "while"
    / "continue"
    / "return"
    / "with"
    / "break"
    / "switch"
    / "case"
    / "try"
    / "default"
    / "null"
    / "true"
    / "false"




OpenBracket = "[" _
CloseBracket = "]" _
OpenBrace = "{" _
CloseBrace = "}" _
OpenParen = "(" _
CloseParen = ")" _
Parens = OpenParen CloseParen
Comma = "," _
Colon = ":" _
Dot = "." _
PlusPlus = "++" _
MinusMinus = "--" _
Exclamation = "!" _
Tilde = "~" _
Plus = "+" !"+" _
Minus = "-" !"-" _
Mult = "*" !"=" _
Div = "/" !"=" _
Modulus = "%" _
LeftShift = "<<" _
SignedRightShift = ">>" !">" _
UnsignedRightShift = ">>>" _
Less = "<" !("<" / "=") _
Greater = ">" !(">" / "=") _
LessEqual = "<=" _
GreaterEqual = ">=" _
Equal = "==" !"=" _
NotEqual = "!=" !"=" _
StrictEqual = "===" _
StrictNotEqual = "!==" _
BitwiseAnd = "&" !("&" / "=") _
BitwiseOr = "|" !("|" / "=") _
BitwiseXor = "^" !"=" _
LogicalAnd = "&&" _
LogicalOr = "||" _
QuestionMark = "?" _
Assign = "=" !"=" _
MultAssign = "*=" _
DivAssign = "/=" _
ModulusAssign = "%=" _
PlusAssign = "+=" _
MinusAssign = "-=" _
LeftShiftAssign = "<<=" _
SignedRightShiftAssign = ">>=" _
UnsignedRightShiftAssign = ">>>=" _
BitwiseOrAssign = "|=" _
BitwiseXorAssign = "^=" _
BitwiseAndAssign = "&|" _
Semicolon = ";" _

IdentifierName -> String 
    = IdentifierStart IdentifierPart* {String::from(match_str)}

Identifier -> String 
    = !(ReservedWord !IdentifierPart) id:IdentifierName _ {id}

IdentifierStart
    = Letter
    / "$"
    / "_"

IdentifierPart
    = IdentifierStart
    / Digit

Digit
    = [0-9]

Letter
    = LowerCaseLetter
    / UpperCaseLetter

LowerCaseLetter
    = [a-z]

UpperCaseLetter
    = [A-Z]

Eol
    = "\n"
    / "\r\n"
    / "\r"
    / "\u{2028}"
    / "\u{2029}"

EolChar
    = [\n\r\u2028\u2029]

WhiteSpace
    = [ \t\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}] // \v\f removed

_ = (WhiteSpace / Eol)*

__ = (WhiteSpace / Eol)+

LineTerminatorSequence
    = LF
    / CR !LF
    / LS
    / PS
    / CR LF

LineTerminator
    = LF
    / CR
    / LS
    / PS

LF = "\u000a" // Line Feed
CR = "\u000d" // CarriageReturn
LS = "\u2028" // LineSeparator
PS = "\u2029" // ParagraphSeparator
